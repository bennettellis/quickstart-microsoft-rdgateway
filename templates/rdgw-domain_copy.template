AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  This template is intended to be installed into an existing VPC with two public subnets
  and an Active Directory domain. It will create an auto-scaling group of RD Gateway
  instances in the public VPC subnets. **WARNING** This template creates Amazon EC2
  Windows instance and related resources. You will be billed for the AWS resources
  used if you create a stack from this template. QS(0006)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VPCID
          - PublicSubnetIDs
          - PrivateSubnetIDs
          - ExternalAccessCIDR
      - Label:
          default: Amazon EC2 Configuration
        Parameters:
          - KeyPairName
          - RDGWInstanceType
          - LatestAmiId
      - Label:
          default: Microsoft Active Directory Configuration
        Parameters:
          - DomainDNSName
          - DomainNetBIOSName
          - DomainMemberSGID
          - DomainAdminUser
          - DomainAdminPassword
      - Label:
          default: Microsoft Remote Desktop Gateway Configuration
        Parameters:
          - DesiredNumberOfRDGatewayHosts
          - DesiredMaxNumberOfRDGatewayHosts
          - DesiredMaxNumberOfRDConnectionBrokerHosts
          - DesiredMaxNumberOfRDConnectionBrokerHosts
      - Label:
          default: AWS Quick Start Configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
          - QSS3BucketRegion
    ParameterLabels:
      DomainAdminPassword:
        default: Domain Admin Password
      DomainAdminUser:
        default: Domain Admin User Name
      DomainDNSName:
        default: Domain DNS Name
      DomainMemberSGID:
        default: Domain Member Security Group ID
      DomainNetBIOSName:
        default: Domain NetBIOS Name
      KeyPairName:
        default: Key Pair Name
      LatestAmiId:
        default: SSM Parameter to Grab Latest AMI ID
      DesiredNumberOfRDGatewayHosts:
        default: Desired Initial Number of RD Gateway Instances
      DesiredMaxNumberOfRDGatewayHosts:
        default: Desired Maximum Number of RD Gateway Instances Auto Scaling Can Cretate
      DesiredMaxNumberOfRDConnectionBrokerHosts:
        default: Desired Initial Number of RD Connection Broker
      DesiredMaxNumberOfRDConnectionBrokerHosts:
        default: Desired Maximum Number of RD Connection Broker Instances Auto Scaling Can Cretate
      PublicSubnet1ID:
        default: Public Subnet 1 ID
      PublicSubnet2ID:
        default: Public Subnet 2 ID
      QSS3BucketName:
        default: Quick Start S3 Bucket Name
      QSS3KeyPrefix:
        default: Quick Start S3 Key Prefix
      QSS3BucketRegion:
        default: Quick Start S3 bucket region
      RDGWInstanceType:
        default: Remote Desktop Gateway Instance Type
      RDGWCIDR:
        default: Allowed Remote Desktop Gateway External Access CIDR
      VPCID:
        default: VPC ID
      pCertificateArn:
        default: ARN of SSL certificate to attach to Remote Desktop Service Application loadbalancer
      CertCN:
        default: CN of the certificate to use for the load balancer
Parameters:
  DomainAdminPassword:
    Description: Password for the domain admin user. Must be at least 8 characters
      containing letters, numbers and symbols
    Type: String
    MinLength: '8'
    MaxLength: '32'
    AllowedPattern: (?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    NoEcho: 'true'
  DomainAdminUser:
    Description: User name for the Domain Administrator. This is separate from the
      default "Administrator" account
    Type: String
    Default: StackAdmin
    MinLength: '5'
    MaxLength: '25'
    AllowedPattern: '[a-zA-Z0-9]*'
  DomainDNSName:
    Description: Fully qualified domain name (FQDN) e.g. example.com
    Type: String
    MinLength: '2'
    MaxLength: '255'
    AllowedPattern: '[a-zA-Z0-9\-]+\..+'
  DomainMemberSGID:
    Description: ID of the Domain Member Security Group (e.g., sg-7f16e910)
    Type: AWS::EC2::SecurityGroup::Id
  DomainNetBIOSName:
    AllowedPattern: '[a-zA-Z0-9\-]+'
    Default: example
    Description: NetBIOS name of the domain (up to 15 characters) for users of earlier
      versions of Windows e.g. EXAMPLE
    MaxLength: '15'
    MinLength: '1'
    Type: String
  KeyPairName:
    Description: Public/private key pairs allow you to securely connect to your instance
      after it launches
    Type: AWS::EC2::KeyPair::KeyName
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-windows-latest/Windows_Server-2016-English-Full-Base
  DesiredNumberOfRDGatewayHosts:
    Description: >-
      The initial number of Remote Desktop Gateway hosts to create. You can start with 1 and modify the Auto Scaling Group
      later to change the minimum number of RD Gateway servers. A Network Load Balancer will be created and all gateways
      added now or later will be automatically included in the load balanced targets.
    Type: Number
    Default: 1
  DesiredMaxNumberOfRDGatewayHosts:
    Description: The maximum number of Remote Desktop Gateway instances to create through the Auto Scaling Group.
    Type: Number
    Default: 2
  DesiredNumberOfRDConnectionBrokerHosts:
    Description: >-
      The initial number of Remote Desktop Gateway hosts to create. You can start with 1 and modify the Auto Scaling Group
      later to change the minimum number of RD Connection Broker servers.
    Type: Number
    Default: 1
  DesiredMaxNumberOfRDConnectionBrokerHosts:
    Description: The maximum number of Remote Desktop Connection Broker instances to create through the Auto Scaling Group.
    Type: Number
    Default: 5
  PrivateSubnetIDs:
    Description: ID of the private subnet that you want to provision the Remove Desktop instances into
      Desktop Gateway into (e.g., subnet-a0246dcd)
    Type: List<AWS::EC2::Subnet::Id>
  PublicSubnetIDs:
    Description: ID of the public subnet you want to provision the Network Load Balancer into
      Desktop Gateway into (e.g., subnet-e3246d8e)
    Type: List<AWS::EC2::Subnet::Id>
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. Quick Start bucket name
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-microsoft-rdgateway/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  QSS3BucketRegion:
    Default: 'us-east-1'
    Description: "The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value."
    Type: String
  RDCBInstanceType:
    Description: Amazon EC2 instance type for the Remote Desktop Services Connection Broker
    Type: String
    Default: t2.large
    AllowedValues:
      - t2.small
      - t2.medium
      - t2.large
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
  RDGWInstanceType:
    Description: Amazon EC2 instance type for the Remote Desktop Services Gateway and Web components instance
    Type: String
    Default: t2.large
    AllowedValues:
      - t2.small
      - t2.medium
      - t2.large
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
  ExternalAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Description: Allowed CIDR Block for external access to the Remote Desktop Gateways
    Type: String
  DBInstanceID:
    Default: rdgwhadbinstance
    Description: Specify a name for your SqlServer database instance that will be use to store the RDS configuration data.
    Type: String
    MinLength: '1'
    MaxLength: '63'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: >-
      Must begin with a letter and must not end with a hyphen or contain two
      consecutive hyphens.
  DBName:
    Default: rdshadb
    Description: Specify a name for your SqlServer database that will store the Remote Desktop Services configuration data.
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.
  DBInstanceClass:
    Default: db.m5.large
    Description: DB instance class
    Type: String
    ConstraintDescription: Must select a valid DB instance type.
  DBAllocatedStorage:
    Default: '10'
    Description: >-
      The size of the Remote Desktop Services HA configuration database (GiB).
      Typically Remote Desktop HA Configuration Database will not be excessively large
    Type: Number
    MinValue: '5'
    MaxValue: '1024'
    ConstraintDescription: must be between 5 and 1024 GiB.
  DBUsername:
    NoEcho: 'true'
    Description: Username to create for Remote Desktop Services database instance.
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    NoEcho: 'true'
    Description: Password to assing user for Remote Desktop Services database instance.
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  VPCID:
    Description: ID of the VPC (e.g., vpc-0343606e). All components of this deployment will be installed in the specified VPC.
    Type: AWS::EC2::VPC::Id
  CertificateArn:
    Type: String
    Description: ARN of SSL certificate to attach to Remote Desktop Service Application loadbalancer
  CertCN:
    Description: Comman Name specified in the TLS Certificate
    Type: String
Rules:
  SubnetsInVPC:
    Assertions:
      - Assert: !EachMemberIn
          - !ValueOfAll
            - AWS::EC2::Subnet::Id
            - VpcId
          - !RefAll 'AWS::EC2::VPC::Id'
        AssertDescription: All subnets must be in the selected VPC
  CheckSupportedInstances:
    RuleCondition: !Contains
      - - m4.large
        - m4.xlarge
        - m4.2xlarge
        - m4.4xlarge
      - !Ref 'RDGWInstanceType'
    Assertions:
      - Assert: !Not
          - !Contains
            - - eu-west-3
            - !Ref 'AWS::Region'
        AssertDescription: M4 instances are not available in the Paris region
Conditions:
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']
  GovCloudCondition: !Equals
    - !Ref 'AWS::Region'
    - us-gov-west-1
Resources:
# Elastic IP for network load balancer
  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
# SQL Server Database deployed as AWS Managed Service RDS
  RDDeploymentHAConfigDB:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceID
      DBName: !Ref DBName
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: !Ref DBAllocatedStorage
      Engine: sqlserver-se
      EngineVersion: 14.00.3281.6.v1
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      MonitoringInterval: '60'
      MonitoringRoleArn: !Sub arn:aws:iam::${AWS:}role/rds-monitoring-role
# Role used by Remote Desktop RDGateway and RDWeb Hosts. Anything the RDS Gateway instance needs should be here.
  RemoteDesktopServicesHostRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - 'arn:aws:iam::aws:policy/AmazonSSMDirectoryServiceAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy'
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - s3:GetObject
                Resource: !Sub
                  - arn:${AWS::Partition}:s3:::${S3Bucket}/${QSS3KeyPrefix}*
                  - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
                Effect: Allow
          PolicyName: aws-quick-start-s3-policy
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - ec2:AssociateAddress
                  - ec2:DescribeAddresses
                Resource:
                  - '*'
                Effect: Allow
          PolicyName: rdgw-eip-policy
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ec2.amazonaws.com
            Effect: Allow
        Version: '2012-10-17'
# Profile to allow attachment of Role to Instance
  RemoteDesktopServicesHostProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref RemoteDesktopServicesHostRole
      Path: /
# Network Load Balancer for Remote Desktop Services Gateway & Web instances
  RemoteDesktopServiceNetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: load_balancing.cross_zone.enabled
          Value: true
        - Key: access_logs.s3.enabled  #todo: determine if access logs need to be enabled and then where stored.
          Value: false
        - Key: deletion_protection.enabled
          Value: false
      Scheme: internet-facing
      SecurityGroups:
        - !Ref RemoteDesktopServicesLoadBalancerSG
      Subnets:
        - !Ref PublicSubnetIDs
      Type: network
# Security Group for the Load Balancer to allow required traffic through
  RemoteDesktopServicesLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows NLB to be communicated with
      GroupName: RemoteDesktopServicesSG
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0  #todo: specify the specific ports that are needed here.
          IpProtocol: -1
      VpcId: !Ref VPCID
# Listener to allow Load Balancer to redirect HTTP traffic to HTTPS
  HTTPlistener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: "redirect"
          RedirectConfig:
            Protocol: "HTTPS"
            Port: "443"
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
      LoadBalancerArn: !Ref RemoteDesktopServiceNetworkLoadBalancer
      Port: 80
      Protocol: "HTTP"
# Gateway Auto Scaling Group
  RDCBAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref RDCBLaunchConfiguration
      VPCZoneIdentifier: !Ref PrivateSubnetIDs
      MinSize: !Ref DesiredNumberOfRDGatewayHosts
      MaxSize: !Ref DesiredMaxNumberOfRDGatewayHosts
      Cooldown: '300'
      DesiredCapacity: !Ref DesiredNumberOfRDGatewayHosts
      Tags:
        - Key: Name
          Value: RemoteDestopGateway
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !Ref DesiredNumberOfConnectionBroker
        Timeout: PT30M
# Launch Configuration for Gateway instances
  RDCBLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName: !Ref RemoteDesktopServicesHostRole
          buckets: 
              - !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      AWS::CloudFormation::Init:
        configSets:
          config:
            - setup
            - join
            - installRDS
            - finalize
        setup:
          files:
            c:\cfn\cfn-hup.conf:
              content: !Sub |
                [main]
                  stack=${AWS::StackName}
                  region=${AWS::Region}

            c:\cfn\hooks.d\cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                  triggers=post.update
                  path=Resources.RDGWLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                  action=cfn-init.exe -v -c config -s ${AWS::StackId} -r RDGWLaunchConfiguration --region ${AWS::Region}

            C:\cfn\scripts\Unzip-Archive.ps1:
              source: !Sub
                - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}submodules/quickstart-microsoft-utilities/scripts/Unzip-Archive.ps1
                - S3Region: !If [UsingDefaultBucket, !Sub '${AWS::Region}', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              authentication: S3AccessCreds
            C:\cfn\modules\AWSQuickStart.zip:
              source: !Sub
                - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}submodules/quickstart-microsoft-utilities/modules/AWSQuickStart.zip
                - S3Region: !If [UsingDefaultBucket, !Sub '${AWS::Region}', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              authentication: S3AccessCreds
            C:\cfn\scripts\Join-Domain.ps1:
              source: !Sub
                - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}submodules/quickstart-microsoft-utilities/scripts/Join-Domain.ps1
                - S3Region: !If [UsingDefaultBucket, !Sub '${AWS::Region}', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              authentication: S3AccessCreds
            c:\cfn\scripts\Initialize-RDGW.ps1:
              source: !Sub
                - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/Initialize-RDGW.ps1
                - S3Region: !If [UsingDefaultBucket, !Sub '${AWS::Region}', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              authentication: S3AccessCreds
            c:\cfn\scripts\Set-EIP.ps1:
              source: !Sub
                - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/Set-EIP.ps1
                - S3Region: !If [UsingDefaultBucket, !Sub '${AWS::Region}', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              authentication: S3AccessCreds
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - c:\cfn\cfn-hup.conf
                  - c:\cfn\hooks.d\cfn-auto-reloader.conf
          commands:
            a-set-execution-policy:
              command: powershell.exe -Command "Set-ExecutionPolicy RemoteSigned -Force"
              waitAfterCompletion: '0'
            b-unpack-quickstart-module:
              command: powershell.exe -Command C:\cfn\scripts\Unzip-Archive.ps1 -Source
                C:\cfn\modules\AWSQuickStart.zip -Destination C:\Windows\system32\WindowsPowerShell\v1.0\Modules\
              waitAfterCompletion: '0'
            c-init-quickstart-module:
              command: !Join
                - ''
                - - powershell.exe -Command "
                  - New-AWSQuickStartResourceSignal -Stack '
                  - !Ref 'AWS::StackName'
                  - ''' -Resource ''RDGWAutoScalingGroup'' -Region '''
                  - !Ref 'AWS::Region'
                  - '''"'
              waitAfterCompletion: '0'
        join:
          commands:
            a-join-domain:
              command: !Sub |
                powershell.exe -Command "C:\cfn\scripts\Join-Domain.ps1 -DomainName ${DomainDNSName} -UserName ${DomainNetBIOSName}\${DomainAdminUser} -Password ${DomainAdminPassword}"
              waitAfterCompletion: forever
        installRDS:
          commands:
            a-install-rds:
              command: !Sub |
                powershell.exe -Command "Install-WindowsFeature RDS-Connection-Broker,RDS-Licensing,RDS-Web-Access,RDS-Gateway,RSAT-RDS-Gateway -IncludeManagementTools"
                # Install-WindowsFeature ,RDS-RD-Server,
              waitAfterCompletion: forever
            b-configure-rdgw:
              command: !Sub |
                powershell.exe -ExecutionPolicy RemoteSigned - C:\cfn\scripts\Initialize-RDGW.ps1 -ServerFQDN $($env:COMPUTERNAME + '.' + '${DomainDNSName'}) -DomainNetBiosName ${DomainNetBIOSName} -GroupName 'domain admins'
              waitAfterCompletion: forever
            c-assign-eip:
              command: !Sub |
                powershell.exe -ExecutionPolicy RemoteSigned - C:\cfn\scripts\Set-EIP.ps1 -EIPs @('${EIP1}')
              waitAfterCompletion: '0'
        finalize:
          commands:
            1-signal-success:
              command: powershell.exe -Command "Write-AWSQuickStartStatus"
              waitAfterCompletion: '0'
    Properties:
      ImageId: !Ref 'LatestAmiId'
      SecurityGroups:
        - !Ref RemoteDesktopGatewaySG
        - !Ref 'DomainMemberSGID'
      IamInstanceProfile: !Ref RemoteDesktopServicesHostProfile
      InstanceType: !Ref RDGWInstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 50
            VolumeType: gp2
      KeyName: !Ref 'KeyPairName'
      UserData: !Base64
        Fn::Sub: |
          <script>
            cfn-init.exe -v -c config -s ${AWS::StackId} -r RDGWLaunchConfiguration --region ${AWS::Region}
          </script>

  RemoteDesktopGatewaySG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable RDP access from the Internet
      VpcId: !Ref 'VPCID'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: !Ref 'RDGWCIDR'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref 'RDGWCIDR'
        - IpProtocol: udp
          FromPort: 3391
          ToPort: 3391
          CidrIp: !Ref 'RDGWCIDR'
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: !Ref 'RDGWCIDR'
Outputs:
  EIP1:
    Description: Elastic IP 1 for RDGW
    Value: !Ref 'EIP1'
  RemoteDesktopGatewaySGID:
    Value: !Ref 'RemoteDesktopGatewaySG'
    Description: Remote Desktop Gateway Security Group ID
