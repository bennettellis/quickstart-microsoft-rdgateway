AWSTemplateFormatVersion: '2010-09-09'
Description: Test
Parameters:
  KeyPairName:
    Description: Public/private key pairs allow you to securely connect to your instance
      after it launches
    Type: AWS::EC2::KeyPair::KeyName
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-windows-latest/Windows_Server-2016-English-Full-Base
  PublicSubnet1ID:
    Description: ID of the public subnet 1 that you want to provision the first Remote
      Desktop Gateway into (e.g., subnet-a0246dcd)
    Type: AWS::EC2::Subnet::Id
  RDGWInstanceType:
    Description: Amazon EC2 instance type for the Remote Desktop Gateway instances
    Type: String
    Default: t2.large
    AllowedValues:
      - t2.small
      - t2.medium
      - t2.large
      - m5.large
  AllowedCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Description: Allowed CIDR Block for external access to the Remote Desktop Gateways
    Type: String
    Default: 73.213.69.135/32
  VPCID:
    Description: ID of the VPC (e.g., vpc-0343606e)
    Type: AWS::EC2::VPC::Id
Resources:
  RDGWHostRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - 'arn:aws:iam::aws:policy/AmazonSSMDirectoryServiceAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy'
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - ec2:AssociateAddress
                  - ec2:DescribeAddresses
                Resource:
                  - '*'
                Effect: Allow
          PolicyName: rdgw-eip-policy
        - PolicyName: Logging
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                  - 'logs:DescribeLogGroups'
                Resource:
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:*:log-group:/aws/ec2/*:log-stream:*'
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ec2.amazonaws.com
            Effect: Allow
        Version: '2012-10-17'
  RDGWHostProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref 'RDGWHostRole'
      Path: /
  RDGWInst:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          config:
            - setup
        setup:
          files:
            c:\cfn\cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackName}
                region=${AWS::Region}
            c:\cfn\hooks.d\cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.RDGWLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=cfn-init.exe -v -c config -s ${AWS::StackId} -r RDGWInst --region ${AWS::Region}
            c:\ProgramData\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent.json:
              content: !Sub |
                {
                  "logs": {
                    "logs_collected": {
                      "files": {
                        "collect_list": [
                        {
                          "file_path": "c:\\cfn\\log\\cfn-init.LOG",
                          "log_group_name": "/aws/ec2/{instance_id}",
                          "log_stream_name": "cfn-init.LOG"
                        },
                        {
                          "file_path": "c:\\ProgramData\\Amazon\\EC2-Windows\\Launch\\Log\\Ec2Launch.LOG",
                          "log_group_name": "/aws/ec2/{instance_id}",
                          "log_stream_name": "Ec2Launch.LOG"
                        },
                        {
                          "file_path": "c:\\ProgramData\\Amazon\\EC2-Windows\\Launch\\Log\\UserdataExecution.LOG",
                          "log_group_name": "/aws/ec2/{instance_id}",
                          "log_stream_name": "UserdataExecution.LOG"
                        }
                        ]
                      }
                    }
                  }
                }
            c:\ProgramData\Amazon\AmazonCloudWatchAgent\Configs\AWS.EC2.Windows.CloudWatch.json:
              content: !Sub |
                {
                  "IsEnabled": true,
                  "EngineConfiguration": {
                    "PollInterval": "00:00:10",
                    "Components": [
                    {
                      "Id": "CFNInitLog",
                      "FullName": "AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch",
                      "Parameters": {
                        "LogDirectoryPath": "C:\\cfn\\log",
                        "TimestampFormat": "MM/dd/yyyy HH:mm:ss",
                        "Encoding": "UTF-8",
                        "Filter": "cfn-init.log",
                        "CultureName": "en-US",
                        "TimeZoneKind": "Local"
                      }
                    },
                    {
                      "Id": "CloudInitLog",
                      "FullName": "AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch",
                      "Parameters": {
                        "LogDirectoryPath": "C:\\cfn\\log",
                        "TimestampFormat": "MM/dd/yyyy HH:mm:ss",
                        "Encoding": "UTF-8",
                        "Filter": "cloud-init.log",
                        "CultureName": "en-US",
                        "TimeZoneKind": "Local"
                      }
                    },
                    {
                      "Id": "CFNHupLog",
                      "FullName": "AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch",
                      "Parameters": {
                        "LogDirectoryPath": "C:\\cfn\\log",
                        "TimestampFormat": "MM/dd/yyyy HH:mm:ss",
                        "Encoding": "UTF-8",
                        "Filter": "cfn-hup.log",
                        "CultureName": "en-US",
                        "TimeZoneKind": "Local"
                      }
                    },
                    {
                      "Id": "CFNWireLog",
                      "FullName": "AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch",
                      "Parameters": {
                        "LogDirectoryPath": "C:\\cfn\\log",
                        "TimestampFormat": "MM/dd/yyyy HH:mm:ss",
                        "Encoding": "UTF-8",
                        "Filter": "cfn-wire.log",
                        "CultureName": "en-US",
                        "TimeZoneKind": "Local"
                      }
                    },
                    {
                      "Id": "Ec2LaunchLog",
                      "FullName": "AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch",
                      "Parameters": {
                        "LogDirectoryPath": "C:\\ProgramData\\Amazon\\EC2-Windows\\Launch\\Logs\\",
                        "TimestampFormat": "MM/dd/yyyy HH:mm:ss",
                        "Encoding": "UTF-8",
                        "Filter": "Ec2Launch.log",
                        "CultureName": "en-US",
                        "TimeZoneKind": "Local"
                      }
                    },
                    {
                      "Id": "UserdataExecutionLog",
                      "FullName": "AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch",
                      "Parameters": {
                        "LogDirectoryPath": "C:\\ProgramData\\Amazon\\EC2-Windows\\Launch\\Logs\\",
                        "TimestampFormat": "MM/dd/yyyy HH:mm:ss",
                        "Encoding": "UTF-8",
                        "Filter": "UserdataExecution.log",
                        "CultureName": "en-US",
                        "TimeZoneKind": "Local"
                      }
                    },
                    {
                      "Id": "CFNHupStream",
                      "FullName": "AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch",
                      "Parameters": {
                        "AccessKey": "",
                        "SecretKey": "",
                        "Region": "us-east-1",
                        "LogGroup": "/aws/ec2/{instance_id}",
                        "LogStream": "cfn-hup.log"
                      }
                    },
                    {
                      "Id": "CFNInitStream",
                      "FullName": "AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch",
                      "Parameters": {
                        "AccessKey": "",
                        "SecretKey": "",
                        "Region": "us-east-1",
                        "LogGroup": "/aws/ec2/{instance_id}",
                        "LogStream": "cfn-init.log"
                      }
                    },
                    {
                      "Id": "CloudInitStream",
                      "FullName": "AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch",
                      "Parameters": {
                        "AccessKey": "",
                        "SecretKey": "",
                        "Region": "us-east-1",
                        "LogGroup": "/aws/ec2/{instance_id}",
                        "LogStream": "cloud-init.log"
                      }
                    },
                    {
                      "Id": "CloudWireStream",
                      "FullName": "AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch",
                      "Parameters": {
                        "AccessKey": "",
                        "SecretKey": "",
                        "Region": "us-east-1",
                        "LogGroup": "/aws/ec2/{instance_id}",
                        "LogStream": "cfn-wire.log"
                      }
                    },
                    {
                      "Id": "Ec2LaunchStream",
                      "FullName": "AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch",
                      "Parameters": {
                        "AccessKey": "",
                        "SecretKey": "",
                        "Region": "us-east-1",
                        "LogGroup": "/aws/ec2/{instance_id}",
                        "LogStream": "ec2launch.log"
                      }
                    },
                    {
                      "Id": "UserdataExecutionStream",
                      "FullName": "AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch",
                      "Parameters": {
                        "AccessKey": "",
                        "SecretKey": "",
                        "Region": "us-east-1",
                        "LogGroup": "/aws/ec2/{instance_id}",
                        "LogStream": "userdata-execution.log"
                      }
                    }
                    ],
                    "Flows": {
                      "Flows":
                        [
                          "CFNHupLog,CFNHupStream",
                          "CFNInitLog,CFNInitStream",
                          "CloudInitLog,CloudInitStream",
                          "CFNHupLog,CFNHupStream",
                          "CFNWireLog,CFNWireStream",
                          "Ec2LaunchLog,Ec2LaunchStream",
                          "UserdataExecutionLog,UserdataExecutionStream"
                        ]
                    }
                  }
                }
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - c:\cfn\cfn-hup.conf
                  - c:\cfn\hooks.d\cfn-auto-reloader.conf
          commands:
            0_stop_cw_service:
              command: !Sub |
                powershell.exe -C "C:\\'Program Files'\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent-ctl.ps1 -a stop"
              waitAfterCompletion: '0'
            1_start_cw_service:
              command: !Sub |
                powershell.exe -C "C:\\'Program Files'\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent-ctl.ps1 -a fetch-config -m ec2 -c file:C:\\ProgramData\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent.json -s"
              waitAfterCompletion: '0'
            2_start_cw_service:
              command: !Sub |
                powershell.exe -C "C:\\'Program Files'\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent-ctl.ps1 -a start"
              waitAfterCompletion: '0'
    Properties:
      ImageId: !Ref 'LatestAmiId'
      SubnetId:
        !Ref PublicSubnet1ID
      SecurityGroupIds:
        - !GetAtt 'RemoteDesktopGatewaySG.GroupId'
      IamInstanceProfile: !Ref 'RDGWHostProfile'
      InstanceType: !Ref 'RDGWInstanceType'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 50
            VolumeType: gp2
      KeyName: !Ref 'KeyPairName'
      UserData:
        Fn::Base64: !Sub |
          <script>
          mkdir C:\Downloads\Amazon\AmazonCloudWatchAgent
          powershell -Command "(New-Object Net.WebClient).DownloadFile('https://s3.amazonaws.com/amazoncloudwatch-agent/windows/amd64/latest/amazon-cloudwatch-agent.msi','C:\Downloads\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent.msi')"
          C:\Downloads\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent.msi
          cfn-init.exe -v --stack ${AWS::StackId} --resource RDGWInst --region ${AWS::Region} --configsets config
          cfn-signal.exe -e %errorlevel% --stack ${AWS::StackId} --resource RDGWInst --region ${AWS::Region}
          </script>
  RemoteDesktopGatewaySG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable RDP access from the Internet
      VpcId: !Ref 'VPCID'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: !Ref 'AllowedCIDR'
Outputs:
  RemoteDesktopGatewaySGID:
    Value: !Ref 'RemoteDesktopGatewaySG'
    Description: Remote Desktop Gateway Security Group ID
