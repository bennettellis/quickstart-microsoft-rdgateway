AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Sample Template CloudWatch_Logs: Provisions a minimal web
  application, and demonstrates how to stream the provisioning logs
  (cloud-init.log, cfn-init.log, cfn-hup.log, and cfn-wire.log) to CloudWatch
  Logs. This eliminates the need to SSH into an EC2 instance for debugging
  provisioning issues. Simply view the logs in the AWS CloudWatch console.
  **WARNING** You will be billed for the AWS resources if you create a stack
  from this template.
Parameters:
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c1.medium
      - c1.xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - g2.2xlarge
      - g2.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
      - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Resources:
  LogRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !FindInMap
                  - Region2Principal
                  - !Ref 'AWS::Region'
                  - EC2Principal
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: LogRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                  - 'logs:DescribeLogGroups'
                Resource:
                  - "*"
  LogRoleInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref LogRole
  CloudFormationLogs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 7
  WebServerInstance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          install_all:
            - install_cfn
            - install_app
            - install_logs
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerInstance --configsets install_all --region ${AWS::Region}
                runas=root
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_app:
          packages:
            yum:
              httpd: []
          files:
            /var/www/html/index.html:
              content: !Sub
                - |
                  <img src="${examplerootlocation}/cloudformation_graphic.png" alt="AWS CloudFormation Logo"/>
                  <h1>Congratulations, you have successfully launched the AWS
                    CloudFormation sample.
                  </h1>
                - examplerootlocation:
                    Fn::FindInMap
                      - Region2Examples
                      - !Ref AWS::Region
                      - Examples
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
        install_logs:
          packages:
            yum:
              awslogs: []
          files:
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file=/var/awslogs/state/agent-state
                [/var/log/cloud-init.log]
                file=/var/log/cloud-init.log
                log_group_name=${CloudFormationLogs}
                log_stream_name={instance_id}/cloud-init.log
                datetime_format=
                [/var/log/cloud-init-output.log]
                file=/var/log/cloud-init-output.log
                log_group_name=${CloudFormationLogs}
                log_stream_name={instance_id}/cloud-init-output.log
                datetime_format=
                [/var/log/cfn-init.log]
                file=/var/log/cfn-init.log
                log_group_name=${CloudFormationLogs}
                log_stream_name={instance_id}/cfn-init.log
                datetime_format=
                [/var/log/cfn-hup.log]
                file=/var/log/cfn-hup.log
                log_group_name=${CloudFormationLogs}
                log_stream_name={instance_id}/cfn-hup.log
                datetime_format=
                [/var/log/cfn-wire.log]
                file=/var/log/cfn-wire.log
                log_group_name=${CloudFormationLogs}
                log_stream_name={instance_id}/cfn-wire.log
                datetime_format=
                [/var/log/httpd]
                file=/var/log/httpd/*
                log_group_name=${CloudFormationLogs}
                log_stream_name={instance_id}/httpd
                datetime_format=%d/%b/%Y:%H:%M:%S
              mode: '000444'
              owner: root
              group: root
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
              mode: '000444'
              owner: root
              group: root
          commands:
            01_create_state_directory:
              command: mkdir -p /var/awslogs/state
          services:
            sysvinit:
              awslogs:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/awslogs/awslogs.conf
    Properties:
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      KeyName: !Ref KeyName
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref LogRoleInstanceProfile
      ImageId: #todo Add this
      UserData: !Base64
        'Fn::Sub': |
          <script>
          Write-Host "Hello Windows 2016 CloudWatch Logs"
          </script>
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access and HTTP access on the inbound port
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
Outputs:
  URL:
    Description: URL of the sample website
    Value: !Sub "http://${WebServerInstance.PublicDnsName}"
