AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  Deploys a bastion host for the RDS Deployment so that instances in private subnets can be accessed
Parameters:
  LaunchBastionInstance:
    Type: String
    Description: Bastion instance can be toggled on and off - for troubleshooting purposes
    Default: 'No'
    AllowedValues:
      - 'Yes'
      - 'No'
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-windows-latest/Windows_Server-2016-English-Full-Base
    #TODO Reinstate VAEC Setting
    #Default: /vaec/ec2/windows-ami
  KeyPairName:
    Description: Public/private key pairs allow you to securely connect to your instance
      after it launches
    #TODO: REMOVE THIS
    Default: bellisIsengardKey1
    Type: AWS::EC2::KeyPair::KeyName
  PublicSubnetIDs:
    Description: IDs of the public subnets that you want to provision the Remove Dekstop Services into
    Type: List<AWS::EC2::Subnet::Id>
  PrivateSubnetIDs:
    Description: IDs of the private subnets that you want the bastion to provide access to
    Type: List<AWS::EC2::Subnet::Id>
  AllowedCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Description: Allowed CIDR Block for access to the Remote Desktop Services Servers
    Type: String
    #TODO: Remove This
    Default: 73.213.69.135/32
  VPCID:
    Description: ID of the VPC (e.g., vpc-0343606e)
    Type: AWS::EC2::VPC::Id
    #TODO: REMOVE THIS
    Default: vpc-057dfad899f784793
  InstanceSecurityGroup:
    Description: Security Group for EC2 Instances
    Type: AWS::EC2::SecurityGroup::Id
  DatabaseSecurityGroup:
    Description: Security Group for Server Server
    Type: AWS::EC2::SecurityGroup::Id
Conditions:
  cLaunchBastionInstance: !Equals [ !Ref LaunchBastionInstance, 'Yes' ]
Resources:
  # Optional bastion instance
  rBastionInstance:
    Type: AWS::EC2::Instance
    Condition: cLaunchBastionInstance
    Properties:
      ImageId: !Ref 'LatestAmiId'
      KeyName: !Ref 'KeyPairName'
      SubnetId: !Select [ 0, !Ref PublicSubnetIDs ]
      SecurityGroupIds: [ !Ref BastionInstanceSecurityGroup ]
      InstanceType: t2.micro
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Bastion Instance

  # Static IP for bastion instance
  rBastionIpAddress:
    Type: AWS::EC2::EIP
    Condition: cLaunchBastionInstance
    Properties:
      Domain: vpc

  # Static IP assiciation for bastion instance
  rBastionIpAddressAssociation:
    Type: AWS::EC2::EIPAssociation
    Condition: cLaunchBastionInstance
    Properties:
      AllocationId: !GetAtt rBastionIpAddress.AllocationId
      InstanceId: !Ref rBastionInstance

  # Security group for bastion instance, allow SSH
  BastionInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: cLaunchBastionInstance
    Properties:
      GroupDescription: !Sub ${AWS::StackName} Bastion Security Group
      SecurityGroupIngress:
        - CidrIp: !Ref AllowedCIDR
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - CidrIp: !Ref AllowedCIDR
          IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
      VpcId: !Ref VPCID
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Bastion Security Group

  # Security group ingress - bastion to application instances
  BastionToApplicationSSHRule:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: cLaunchBastionInstance
    Properties:
      SourceSecurityGroupId: !Ref BastionInstanceSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      GroupId: !Ref InstanceSecurityGroup

  # Security group ingress - bastion to application instances
  BastionToApplicationRDPRule:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: cLaunchBastionInstance
    Properties:
      SourceSecurityGroupId: !Ref BastionInstanceSecurityGroup
      IpProtocol: tcp
      FromPort: 3389
      ToPort: 3389
      GroupId: !Ref InstanceSecurityGroup

  # Security group ingress - bastion to RDS
  BastionToDatabaseRule:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: cLaunchBastionInstance
    Properties:
      SourceSecurityGroupId: !Ref BastionInstanceSecurityGroup
      IpProtocol: tcp
      FromPort: 1433
      ToPort: 1433
      GroupId: !Ref DatabaseSecurityGroup
Outputs:
  BastionHostSG:
    Value: !Ref BastionInstanceSecurityGroup
    Description: Bastion Host SG
    Export:
      Name: BastionHostSG
