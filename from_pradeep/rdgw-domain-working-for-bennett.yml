AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  This template is intended to be installed into an existing VPC with two private subnets
  and an Active Directory domain. It will create an auto-scaling group of RD Gateway
  instances in the private VPC subnets. **WARNING** This template creates Amazon EC2
  Windows instance and related resources. You will be billed for the AWS resources
  used if you create a stack from this template. QS(0006)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VPCID
          - pRemoteDesktopSubnet1ID
          - pRemoteDesktopSubnet2ID
          - RDGWCIDR
      - Label:
          default: Amazon EC2 Configuration
        Parameters:
          - KeyPairName
          - RDGWInstanceType
          - LatestAmiId
      - Label:
          default: Microsoft Active Directory Configuration
        Parameters:
          - DomainDNSName
          - DomainNetBIOSName
      - Label:
          default: Microsoft Remote Desktop Services Configuration
        Parameters:
          - NumberOfRDGWHosts
      - Label:
          default: Solution Source File Configuration
        Parameters:
          - S3BucketName
          - S3KeyPrefix
          - S3BucketRegion
    ParameterLabels:
      DomainDNSName:
        default: Domain DNS Name
      DomainNetBIOSName:
        default: Domain NetBIOS Name
      KeyPairName:
        default: Key Pair Name
      LatestAmiId:
        default: SSM Parameter to Grab Latest AMI ID
      NumberOfRDGWHosts:
        default: Number of RDGW Hosts
      pRemoteDesktopSubnet1ID:
        default: Private Subnet 1 ID
      pRemoteDesktopSubnet2ID:
        default: Private Subnet 2 ID
      S3BucketName:
        default: Quick Start S3 Bucket Name
      S3KeyPrefix:
        default: Quick Start S3 Key Prefix
      S3BucketRegion:
        default: Quick Start S3 bucket region
      RDGWInstanceType:
        default: Remote Desktop Gateway Instance Type
      RDGWCIDR:
        default: Allowed Remote Desktop Gateway External Access CIDR
      VPCID:
        default: VPC ID
      pCertificateArn:
        default: ARN of SSL certificate to attach to Remote Desktop Service Application loadbalancer
Parameters:
  DomainDNSName:
    Description: Fully qualified domain name (FQDN) e.g. example.com
    Type: String
    MinLength: '2'
    MaxLength: '255'
    AllowedPattern: '[a-zA-Z0-9\-]+\..+'
  SecreteARN:
    Description: ARN for pfx certificate
    Type: String
  DomainOUPath:
    Description: OU path of the domain
    Type: String

  CertCN:
    Description: Comman Name specified in the TLS Certificate
    Type: String
  # DomainMemberSGID:
  #   Description: ID of the Domain Member Security Group (e.g., sg-7f16e910)
  #   Type: AWS::EC2::SecurityGroup::Id
  DomainNetBIOSName:
    AllowedPattern: '[a-zA-Z0-9\-]+'
    Default: va
    Description: NetBIOS name of the domain (up to 15 characters) for users of earlier
      versions of Windows e.g. EXAMPLE
    MaxLength: '15'
    MinLength: '1'
    Type: String
  KeyPairName:
    Description: Public/private key pairs allow you to securely connect to your instance
      after it launches
    Type: AWS::EC2::KeyPair::KeyName
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    #Default: /aws/service/ami-windows-latest/Windows_Server-2016-English-Full-Base
    Default: /vaec/ec2/windows-ami
  NumberOfRDGWHosts:
    AllowedValues:
      - '1'
      - '2'
      - '3'
      - '4'
    Default: '1'
    Description: Enter the number of Remote Desktop Gateway hosts to create
    Type: String
  pRemoteDesktopSubnet1ID:
    Description: ID of the private subnet 1 that you want to provision the first Remote
      Desktop Gateway into (e.g., subnet-a0246dcd)
    Type: AWS::EC2::Subnet::Id
  pRemoteDesktopSubnet2ID:
    Description: ID of the private subnet 2 you want to provision the second Remote
      Desktop Gateway into (e.g., subnet-e3246d8e)
    Type: AWS::EC2::Subnet::Id
  S3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. Quick Start bucket name
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Type: String
  S3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-microsoft-rdgateway/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  S3BucketRegion:
    Default: 'us-east-1'
    Description: "The AWS Region where the Quick Start S3 bucket (S3BucketName) is hosted. When using your own bucket, you must specify this value."
    Type: String
  RDGWInstanceType:
    Description: Amazon EC2 instance type for the Remote Desktop Gateway instances
    Type: String
    Default: t2.large
    AllowedValues:
      - t2.small
      - t2.medium
      - t2.large
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
  RDGWCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Description: Allowed CIDR Block for external access to the Remote Desktop Gateways
    Type: String
    Default: 10.0.0.0/8

  VPCID:
    Description: ID of the VPC (e.g., vpc-0343606e)
    Type: AWS::EC2::VPC::Id
  DBSubnet1ID:
    Description: Database Subnet ID
    Type: AWS::EC2::Subnet::Id
  DBSubnet2ID:
    Description: Database Subnet ID
    Type: AWS::EC2::Subnet::Id

  SqlServerInstanceName:
    NoEcho: 'false'
    Description: RDS SQL Server Instance Name
    Type: String
    Default: MyAppInstance
    MinLength: '1'
    MaxLength: '63'
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
  DomainID:
    #Default: 'us-east-1'
    Default: 'd-xxxxxxxx'
    Description: "AD Connector Director ID"
    Type: String
  DatabaseUsername:
    AllowedPattern: "[a-zA-Z0-9]+"
    ConstraintDescription: DBAdmin
    Description: Database Admin Account User Name
    MaxLength: '16'
    MinLength: '1'
    Type: String
    Default: DBAdmin
  DatabasePassword:
    AllowedPattern: "^(?=.*[0-9])(?=.*[a-zA-Z])([a-zA-Z0-9]+)"
    ConstraintDescription: Must contain only alphanumeric characters with at least one capital letter and one number.
    Description: The database admin account password.
    MaxLength: '41'
    MinLength: '6'
    NoEcho: 'true'
    Type: String
  DBEngine:
    Description: Select Database Engine
    Type: String
    AllowedValues: [sqlserver-ee,sqlserver-se,sqlserver-ex]
  pCertificateARN:
    Description: SSL Certificate ARN that will be attached to LoadBalancer
    Type: String
    Default: Enter ARN of SSL cert
  pAWSSecretPrefix:
    Description: SSL Certificate ARN that will be attached to LoadBalancer
    Type: String
    Default: Enter AWS secret path prefix
Rules:
  SubnetsInVPC:
    Assertions:
      - Assert: !EachMemberIn
          - !ValueOfAll
            - AWS::EC2::Subnet::Id
            - VpcId
          - !RefAll 'AWS::EC2::VPC::Id'
        AssertDescription: All subnets must in the VPC
  CheckSupportedInstances:
    RuleCondition: !Contains
      - - m4.large
        - m4.xlarge
        - m4.2xlarge
        - m4.4xlarge
      - !Ref 'RDGWInstanceType'
    Assertions:
      - Assert: !Not
          - !Contains
            - - eu-west-3
            - !Ref 'AWS::Region'
        AssertDescription: M4 instances are not available in the Paris region
Conditions:
  UsingDefaultBucket: !Equals [!Ref S3BucketName, 'aws-quickstart']
  2RDGWCondition: !Or
    - !Equals
      - !Ref 'NumberOfRDGWHosts'
      - '2'
    - !Condition '3RDGWCondition'
    - !Condition '4RDGWCondition'
  3RDGWCondition: !Or
    - !Equals
      - !Ref 'NumberOfRDGWHosts'
      - '3'
    - !Condition '4RDGWCondition'
  4RDGWCondition: !Equals
    - !Ref 'NumberOfRDGWHosts'
    - '4'
  GovCloudCondition: !Equals
    - !Ref 'AWS::Region'
    - us-gov-west-1
Resources:
  MSSQLServerDomainPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        # MUST HAVE - Policy name begins with "project-"
        # MUST HAVE for mult-region - Stack name starts with "project-"
        # Auto-assigned name = <stack-name>-<resourcename>-<random>
        # Example Auto assigned name = project-s3-role-example-rS3Policy-1ST3R7IYC9JJ5
        Description: MS-SQL server doamin policy
        # MUST HAVE - Policy document Path: /project/
        Path: /vaec/
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Sid: AllowSSMReadAccess
              Effect: Allow
              Action:
              - ds:DescribeDirectories
              - ds:AuthorizeApplication
              - ds:UnauthorizeApplication
              - ds:GetAuthorizedApplicationDetails
              Resource: "*"
  MSSQLServerDomainRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref MSSQLServerDomainPolicy
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Principal:
              Service:
                - rds.amazonaws.com
            Effect: Allow
        Version: '2012-10-17'

  SecretsManagerAllowPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        # MUST HAVE - Policy name begins with "project-"
        # MUST HAVE for mult-region - Stack name starts with "project-"
        # Auto-assigned name = <stack-name>-<resourcename>-<random>
        # Example Auto assigned name = project-s3-role-example-rS3Policy-1ST3R7IYC9JJ5
        Description: Project Administrator created S3 Policy
        # MUST HAVE - Policy document Path: /project/
        Path: /vaec/
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Sid: AllowSSMReadAccess
              Effect: Allow
              Action:
              - secretsmanager:GetSecretValue
              Resource:
               - !Ref SecreteARN
               - !Sub arn:${AWS::Partition}:secretsmanager:*:*:secret:/vaec/workspaces/domains/va.gov/*
  SecretsManagerDenyPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        # MUST HAVE - Policy name begins with "project-"
        # MUST HAVE for mult-region - Stack name starts with "project-"
        # Auto-assigned name = <stack-name>-<resourcename>-<random>
        # Example Auto assigned name = project-s3-role-example-rS3Policy-1ST3R7IYC9JJ5
        Description: Project Administrator created S3 Policy
        # MUST HAVE - Policy document Path: /project/
        Path: /vaec/
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Sid: AllowSSMReadAccess
              Effect: Deny
              Action:
              - secretsmanager:GetSecretValue
              Resource:
               - !Ref SecreteARN
  RDGWHostRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMDirectoryServiceAccess
        - !Sub arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy
        - !Ref SecretsManagerAllowPolicy
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - s3:GetObject
                Resource: !Sub
                  - arn:${AWS::Partition}:s3:::${S3Bucket}/${S3KeyPrefix}*
                  - S3Bucket: !If [UsingDefaultBucket, !Sub '${S3BucketName}-${AWS::Region}', !Ref S3BucketName]
                Effect: Allow
          PolicyName: aws-quick-start-s3-policy
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - ec2:AssociateAddress
                  - ec2:DescribeAddresses
                Resource:
                  - '*'
                Effect: Allow
          PolicyName: rdgw-eip-policy
      Path: /vaec/
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ec2.amazonaws.com
            Effect: Allow
        Version: '2012-10-17'
  RDGWHostProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref RDGWHostRole
      Path: /vaec/
  RDGWAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref RDGWLaunchConfiguration
      VPCZoneIdentifier:
        - !Ref pRemoteDesktopSubnet1ID
        - !Ref pRemoteDesktopSubnet2ID
      MinSize: !Ref NumberOfRDGWHosts
      MaxSize: !Ref NumberOfRDGWHosts
      TargetGroupARNs:
        - !Ref rALBTargetGroup
      Cooldown: '300'
      DesiredCapacity: !Ref NumberOfRDGWHosts
      Tags:
        - Key: Name
          Value: RDGW
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !Ref 'NumberOfRDGWHosts'
        Timeout: PT30M
  RDGWLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName: !Ref 'RDGWHostRole'
          buckets:
              - !If [UsingDefaultBucket, !Sub '${S3BucketName}-${AWS::Region}', !Ref S3BucketName]
      AWS::CloudFormation::Init:
        configSets:
          config:
            - setup
            - join
            #- installRDS
            - finalize
        setup:
          files:
            c:\cfn\cfn-hup.conf:
              content: !Join
                - ''
                - - "[main]\n"
                  - stack=
                  - !Ref 'AWS::StackName'
                  - "\n"
                  - region=
                  - !Ref 'AWS::Region'
                  - "\n"
            c:\cfn\hooks.d\cfn-auto-reloader.conf:
              content: !Join
                - ''
                - - "[cfn-auto-reloader-hook]\n"
                  - "triggers=post.update\n"
                  - "path=Resources.RDGWLaunchConfiguration.Metadata.AWS::CloudFormation::Init\n"
                  - 'action=cfn-init.exe -v -c config -s '
                  - !Ref 'AWS::StackId'
                  - ' -r RDGWLaunchConfiguration'
                  - ' --region '
                  - !Ref 'AWS::Region'
                  - "\n"
            C:\cfn\scripts\Unzip-Archive.ps1:
              source: !Sub
                - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${S3KeyPrefix}submodules/quickstart-microsoft-utilities/scripts/Unzip-Archive.ps1
                - S3Region: !If [UsingDefaultBucket, !Sub '${AWS::Region}', !Ref S3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${S3BucketName}-${AWS::Region}', !Ref S3BucketName]
              authentication: S3AccessCreds
            C:\cfn\modules\AWSQuickStart.zip:
              source: !Sub
                - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${S3KeyPrefix}submodules/quickstart-microsoft-utilities/modules/AWSQuickStart.zip
                - S3Region: !If [UsingDefaultBucket, !Sub '${AWS::Region}', !Ref S3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${S3BucketName}-${AWS::Region}', !Ref S3BucketName]
              authentication: S3AccessCreds
            C:\cfn\scripts\Join-Domain.ps1:
              source: !Sub
                - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${S3KeyPrefix}scripts/Join-Domain.ps1
                - S3Region: !If [UsingDefaultBucket, !Sub '${AWS::Region}', !Ref S3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${S3BucketName}-${AWS::Region}', !Ref S3BucketName]
              authentication: S3AccessCreds
            c:\cfn\scripts\Initialize-RDGW.ps1:
              source: !Sub
                - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${S3KeyPrefix}scripts/Initialize-RDGW.ps1
                - S3Region: !If [UsingDefaultBucket, !Sub '${AWS::Region}', !Ref S3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${S3BucketName}-${AWS::Region}', !Ref S3BucketName]
              authentication: S3AccessCreds
            c:\cfn\scripts\Set-EIP.ps1:
              source: !Sub
                - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${S3KeyPrefix}scripts/Set-EIP.ps1
                - S3Region: !If [UsingDefaultBucket, !Sub '${AWS::Region}', !Ref S3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${S3BucketName}-${AWS::Region}', !Ref S3BucketName]
              authentication: S3AccessCreds
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - c:\cfn\cfn-hup.conf
                  - c:\cfn\hooks.d\cfn-auto-reloader.conf
          commands:
            a-set-execution-policy:
              command: powershell.exe -Command "Set-ExecutionPolicy RemoteSigned -Force"
              waitAfterCompletion: '0'
            b-unpack-quickstart-module:
              command: powershell.exe -Command C:\cfn\scripts\Unzip-Archive.ps1 -Source
                C:\cfn\modules\AWSQuickStart.zip -Destination C:\Windows\system32\WindowsPowerShell\v1.0\Modules\
              waitAfterCompletion: '0'
            c-init-quickstart-module:
              command: !Sub |
                powershell.exe -Command "New-AWSQuickStartResourceSignal -Stack '${AWS::StackName}' -Resource 'RDGWAutoScalingGroup' -Region '${AWS::Region}'"
              waitAfterCompletion: '0'
        join:
          commands:
            a-join-domain:
              command: !Join
                - ''
                - - powershell.exe -Command "C:\cfn\scripts\Join-Domain.ps1 -DomainName
                    '
                  - !Ref DomainDNSName
                  - ''' -OUPath '''
                  - !Ref DomainOUPath
                  - ''' -AWSSecretPrefix '''
                  - !Ref pAWSSecretPrefix
                  - '''"'
              waitAfterCompletion: forever
        finalize:
          commands:
            1-signal-success:
              command: powershell.exe -Command "Write-AWSQuickStartStatus"
              waitAfterCompletion: '0'
    Properties:
      ImageId: !Ref 'LatestAmiId'
      SecurityGroups:
        - !Ref RemoteDesktopGatewaySG
        #- !Ref 'DomainMemberSGID'
      IamInstanceProfile: !Ref 'RDGWHostProfile'
      InstanceType: !Ref 'RDGWInstanceType'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 50
            VolumeType: gp2
      KeyName: !Ref 'KeyPairName'
      UserData: !Base64
        Fn::Join:
          - ''
          - - "<script>\n"
            - 'cfn-init.exe -v -c config -s '
            - !Ref 'AWS::StackId'
            - ' -r RDGWLaunchConfiguration'
            - ' --region '
            - !Ref 'AWS::Region'
            - "\n"
            - "</script>\n"
  RemoteDesktopGatewaySG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable RDP access from the Internet
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: !Ref 'RDGWCIDR'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref 'RDGWCIDR'
        - IpProtocol: udp
          FromPort: 3391
          ToPort: 3391
          CidrIp: !Ref 'RDGWCIDR'
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: !Ref 'RDGWCIDR'

  rALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      #GroupName: !Sub ${AWS::StackName}-elb-${pUniqueTimestampHash}-sg
      GroupDescription: 'Port access rules for the Remote Desktop Web Access Application LoadBalancer'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - FromPort: 80
          ToPort: 80
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - FromPort: 443
          ToPort: 443
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPCID

  rRemoteDesktopALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      #Name: !Sub ${AWS::StackName}-app-lb
      Type: application
      SecurityGroups:
        - !Ref rALBSecurityGroup
      Scheme: internal
      Subnets:
      - !Ref pRemoteDesktopSubnet1ID
      - !Ref pRemoteDesktopSubnet2ID

  rALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref rRemoteDesktopALB
      Port: 443
      Certificates:
        - CertificateArn: !Ref pCertificateARN
      Protocol: HTTPS
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref rALBTargetGroup
  rALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTPS
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 5
      #Name: !Sub ${AWS::StackName}-App-TG
      Port: 443
      Protocol: HTTPS
      VpcId: !Ref VPCID

  NLBLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      #Name: !Join ['', [!Ref ServiceName, LoadBalancer]]
      # "internal" is also an option
      #Scheme: internet-facing
      Scheme: internal
      Type: network
      Subnets:
      - !Ref pRemoteDesktopSubnet1ID
      - !Ref pRemoteDesktopSubnet2ID

  NLBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 443
      Protocol: TCP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # default is 300
      TargetType: ip
      VpcId: !Ref VPCID
  NLBListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref NLBTargetGroup
          Type: forward
      LoadBalancerArn: !Ref NLBLoadBalancer
      Port: !Ref LoadBalancerPort
      Protocol: TCP

      Port: 443
      # Protocol: HTTP
  NLBListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref NLBTargetGroup
          Type: forward
      LoadBalancerArn: !Ref NLBLoadBalancer
      Port: 80
      Protocol: TCP

  rSQLDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Ref SqlServerInstanceName
      LicenseModel: license-included
      Engine: !Ref DBEngine
      EngineVersion: 14.00.3281.6.v1
      DBInstanceClass: db.t3.xlarge
      AllocatedStorage: '50'
      MasterUsername: !Ref DatabaseUsername
      MasterUserPassword: !Ref DatabasePassword
      PubliclyAccessible: false
      BackupRetentionPeriod: '1'
      DBSubnetGroupName: !Ref rDBSubnetGroup
      StorageEncrypted: true
      StorageType: standard
      VPCSecurityGroups:
        - !Ref rDatabaseSecurityGroup
      #If SQL RDS needs to Active Directory Integrated then uncomment following parameter.
      #Domain: !Ref DomainID
      #IAM role is mandate for AD integration
      #DomainIAMRoleName: !Ref MSSQLServerDomainRole
  rDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: DBSubnetGroup
      SubnetIds:
        - !Ref DBSubnet1ID
        - !Ref DBSubnet2ID
  # Database security group
  rDatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'MS SQL server Security Group'
      SecurityGroupIngress:
        - FromPort: 135
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          ToPort: 135
        - FromPort: 1433
          ToPort: 1433
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPCID
Outputs:
  RemoteDesktopGatewaySGID:
    Value: !Ref 'RemoteDesktopGatewaySG'
    Description: Remote Desktop Gateway Security Group ID
  SQLDatabaseEndpoint:
   Description: Database endpoint
   Value: !Sub "${rSQLDatabase.Endpoint.Address}:${rSQLDatabase.Endpoint.Port}"
